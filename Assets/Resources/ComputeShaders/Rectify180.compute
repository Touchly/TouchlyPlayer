#pragma kernel CSMain

//RWTexture2D<float4> In;
Texture2D<float4> In;
RWTexture2D<float4> Result;
#define PI    3.141592653589793
#define TWOPI 6.283185307179587
#define HPI   1.570796326794896
#define QPI   4.712388980384689

[numthreads(16, 16, 1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    uint rows, cols;
    Result.GetDimensions(cols, rows);
    if (id.x * id.y >= rows * cols)
        return;

    float theta = (1 - 2*(float)(id.y+0.5) / (rows)) * PI; 
    float phi =   (1 - (float)(id.x+0.5) / (cols))* PI;

    float3 xyz;

    uint eq_rows = cols;
    uint eq_cols = rows;

    xyz.x = cos(phi); //igual
    xyz.y = sin(phi) * sin(theta); //igual
    xyz.z = sin(phi) * cos(theta); //igual

    float theta_new = acos(-xyz.y); //igual
    float phi_new = QPI - atan2(xyz.z, xyz.x); //igual

    float u = theta_new * (float)(eq_rows) / PI- 0.5; //igual
    float v = phi_new *   (float)(eq_cols) / TWOPI -0.5; //igual

    uint u1, u2, v1, v2;
    u1 = (uint)u;
    v1 = (uint)v;
    u2 = u1 + 1;
    v2 = v1 + 1;

    float w1, w2, w3, w4;
    w1 = ((float)u2 - u) * ((float)v2 - v);
    w2 = ((float)u2 - u) * ((float)v - v1);
    w3 = ((float)u - u1) * ((float)v2 - v);
    w4 = ((float)u - u1) * ((float)v - v1);

    float4 p1, p2, p3, p4;
    p1 = In[float2((v1-0.25*rows)*2, u1)];
    p2 = In[float2((v2-0.25*rows)*2, u1)];
    p3 = In[float2((v1-0.25*rows)*2, u2)];
    p4 = In[float2((v2-0.25*rows)*2, u2)];

    float4 return_val;
    return_val = p1 * w1 + p2 * w2 +  p3 * w3 + p4 * w4;
    
    //Result[float2(id.x,(id.y-0.25*rows)*2)] = saturate(float4(return_val.xyz,1));
    Result[id.xy] = saturate(float4(return_val.xyz,1));

}